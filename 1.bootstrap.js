(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "../pkg/wasm_cytoscape.js":
/*!********************************!*\
  !*** ../pkg/wasm_cytoscape.js ***!
  \********************************/
/*! exports provided: CytoGraph, __wbindgen_object_drop_ref, __wbindgen_string_new, __wbg_new_59cb74e423758ede, __wbg_stack_558ba5917b466edd, __wbg_error_4bb6c2a97407129a, __wbg_log_cc6b9ddc6ca5449d, __wbg_random_5f96f58bd6257873, __wbindgen_throw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wasm_cytoscape_bg.wasm */ \"../pkg/wasm_cytoscape_bg.wasm\");\n/* harmony import */ var _wasm_cytoscape_bg_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./wasm_cytoscape_bg.js */ \"../pkg/wasm_cytoscape_bg.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CytoGraph\", function() { return _wasm_cytoscape_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"CytoGraph\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_object_drop_ref\", function() { return _wasm_cytoscape_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbindgen_object_drop_ref\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_string_new\", function() { return _wasm_cytoscape_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbindgen_string_new\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"__wbg_new_59cb74e423758ede\", function() { return _wasm_cytoscape_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbg_new_59cb74e423758ede\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"__wbg_stack_558ba5917b466edd\", function() { return _wasm_cytoscape_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbg_stack_558ba5917b466edd\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"__wbg_error_4bb6c2a97407129a\", function() { return _wasm_cytoscape_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbg_error_4bb6c2a97407129a\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"__wbg_log_cc6b9ddc6ca5449d\", function() { return _wasm_cytoscape_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbg_log_cc6b9ddc6ca5449d\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"__wbg_random_5f96f58bd6257873\", function() { return _wasm_cytoscape_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbg_random_5f96f58bd6257873\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return _wasm_cytoscape_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbindgen_throw\"]; });\n\n\n\n\n//# sourceURL=webpack:///../pkg/wasm_cytoscape.js?");

/***/ }),

/***/ "../pkg/wasm_cytoscape_bg.js":
/*!***********************************!*\
  !*** ../pkg/wasm_cytoscape_bg.js ***!
  \***********************************/
/*! exports provided: CytoGraph, __wbindgen_object_drop_ref, __wbindgen_string_new, __wbg_new_59cb74e423758ede, __wbg_stack_558ba5917b466edd, __wbg_error_4bb6c2a97407129a, __wbg_log_cc6b9ddc6ca5449d, __wbg_random_5f96f58bd6257873, __wbindgen_throw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CytoGraph\", function() { return CytoGraph; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_object_drop_ref\", function() { return __wbindgen_object_drop_ref; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_string_new\", function() { return __wbindgen_string_new; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_new_59cb74e423758ede\", function() { return __wbg_new_59cb74e423758ede; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_stack_558ba5917b466edd\", function() { return __wbg_stack_558ba5917b466edd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_error_4bb6c2a97407129a\", function() { return __wbg_error_4bb6c2a97407129a; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_log_cc6b9ddc6ca5449d\", function() { return __wbg_log_cc6b9ddc6ca5449d; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_random_5f96f58bd6257873\", function() { return __wbg_random_5f96f58bd6257873; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony import */ var _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wasm_cytoscape_bg.wasm */ \"../pkg/wasm_cytoscape_bg.wasm\");\n\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory0 = new Uint8Array(_wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetInt32Memory0 = new Int32Array(_wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction notDefined(what) { return () => { throw new Error(`${what} is not defined`); }; }\n/**\n* The main data structure for representing a cytoscape graph.\n* CytoGraph uses an internal graph structure `graph` as well as graph element\n* deltas such as `added_nodes` and `removed_nodes` to buffer changes to UI.\n*\n* Graph metadata is stored in the internal graph itself. Under the hood, elements should\n* not be removed directly from the graph, but rather flagged as removed with metadata.\n*/\nclass CytoGraph {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CytoGraph.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_cytograph_free\"](ptr);\n    }\n    /**\n    * @returns {CytoGraph}\n    */\n    static new() {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_new\"]();\n        return CytoGraph.__wrap(ret);\n    }\n    /**\n    * Creates a fully connected CytoGraph of a certain size\n    * @param {number} size\n    * @returns {CytoGraph}\n    */\n    static new_full(size) {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_new_full\"](size);\n        return CytoGraph.__wrap(ret);\n    }\n    /**\n    * algo exposes cytograph members too\n    * algo(cytograph)\n    *     for each node as state machine\n    *         do thing\n    *             hold node state too, but not pub struct with wasm-bindgen\n    *\n    *             assign meta\n    *             do deltas\n    *             !!!!!!!!! dont need deltas now that we're doing all meta!!!!!!!!!\n    *                      check the meta deltas, first bit meaning add/del\n    *                         - if included in meta, that's everything\n    *                         - aka no partial meta updates!!!!!!!\n    *\n    * Do something given the current network state for all elements\n    * Returns a u8 depending on its execution state\n    * (0) return, (1) yield, (2) error\n    * @returns {number}\n    */\n    tick() {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_tick\"](this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    add_node() {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_add_node\"](this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} idx\n    * @returns {number}\n    */\n    get_node_meta(idx) {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_get_node_meta\"](this.ptr, idx);\n        return ret;\n    }\n    /**\n    * @param {number} idx\n    * @param {number} meta\n    */\n    set_node_meta(idx, meta) {\n        _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_set_node_meta\"](this.ptr, idx, meta);\n    }\n    /**\n    * Number of members in each added node. This is used by Javascript to index\n    * directly into wasm linear memory\n    * @param {number} src\n    * @param {number} dst\n    * @returns {number}\n    */\n    add_edge(src, dst) {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_add_edge\"](this.ptr, src, dst);\n        return ret >>> 0;\n    }\n    /**\n    * Hack to return a buf of edge endpoints by index\n    * @param {number} idx\n    * @returns {number}\n    */\n    get_edge_ends(idx) {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_get_edge_ends\"](this.ptr, idx);\n        return ret;\n    }\n    /**\n    * @param {number} idx\n    * @returns {number}\n    */\n    get_edge_meta(idx) {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_get_edge_meta\"](this.ptr, idx);\n        return ret;\n    }\n    /**\n    * @param {number} idx\n    * @param {number} meta\n    */\n    set_edge_meta(idx, meta) {\n        _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_set_edge_meta\"](this.ptr, idx, meta);\n    }\n    /**\n    * Number of members in each added edge. This is used by Javascript to index\n    * directly into wasm linear memory\n    * @returns {number}\n    */\n    get_node_ids() {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_get_node_ids\"](this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    node_ids_count() {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_node_ids_count\"](this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_edge_ids() {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_get_edge_ids\"](this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    edge_ids_count() {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_edge_ids_count\"](this.ptr);\n        return ret >>> 0;\n    }\n}\n\nconst __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nconst __wbindgen_string_new = function(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nconst __wbg_new_59cb74e423758ede = function() {\n    var ret = new Error();\n    return addHeapObject(ret);\n};\n\nconst __wbg_stack_558ba5917b466edd = function(arg0, arg1) {\n    var ret = getObject(arg1).stack;\n    var ptr0 = passStringToWasm0(ret, _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"], _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_realloc\"]);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nconst __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](arg0, arg1);\n    }\n};\n\nconst __wbg_log_cc6b9ddc6ca5449d = function(arg0) {\n    console.log(getObject(arg0));\n};\n\nconst __wbg_random_5f96f58bd6257873 = typeof Math.random == 'function' ? Math.random : notDefined('Math.random');\n\nconst __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../www/node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))\n\n//# sourceURL=webpack:///../pkg/wasm_cytoscape_bg.js?");

/***/ }),

/***/ "../pkg/wasm_cytoscape_bg.wasm":
/*!*************************************!*\
  !*** ../pkg/wasm_cytoscape_bg.wasm ***!
  \*************************************/
/*! exports provided: memory, __wbg_cytograph_free, cytograph_new, cytograph_new_full, cytograph_tick, cytograph_add_node, cytograph_get_node_meta, cytograph_set_node_meta, cytograph_add_edge, cytograph_get_edge_ends, cytograph_get_edge_meta, cytograph_set_edge_meta, cytograph_get_node_ids, cytograph_node_ids_count, cytograph_get_edge_ids, cytograph_edge_ids_count, __wbindgen_free, __wbindgen_malloc, __wbindgen_realloc */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./wasm_cytoscape_bg.js */ \"../pkg/wasm_cytoscape_bg.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///../pkg/wasm_cytoscape_bg.wasm?");

/***/ }),

/***/ "./constants.js":
/*!**********************!*\
  !*** ./constants.js ***!
  \**********************/
/*! exports provided: META_FLAG_IDX, NODE_ID_PREFIX, EDGE_ID_PREFIX */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"META_FLAG_IDX\", function() { return META_FLAG_IDX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NODE_ID_PREFIX\", function() { return NODE_ID_PREFIX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EDGE_ID_PREFIX\", function() { return EDGE_ID_PREFIX; });\n/**\n * Metadata is encoded as a uint from wasm linear memory. We can read it per bit\n * as a flag for configurable front-end styles.\n * \n * TODO: probably give it a callback also to apply the style\n */\nconst META_FLAG_IDX = {\n    PRESENT: 0,\n    HIGHLIGHTED: 1\n}\n\n/**\n * Because petgraph NodeIndex and EdgeIndex can overlap, and because we use those\n * as indices for Cytoscape, we need to assign each a unique id using prefix\n */\nconst NODE_ID_PREFIX = \"node_\";\nconst EDGE_ID_PREFIX = \"edge_\";\n\n\n//# sourceURL=webpack:///./constants.js?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var wasm_cytoscape_wasm_cytoscape_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! wasm-cytoscape/wasm_cytoscape_bg */ \"../pkg/wasm_cytoscape_bg.wasm\");\n/* harmony import */ var wasm_cytoscape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! wasm-cytoscape */ \"../pkg/wasm_cytoscape.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ \"./constants.js\");\n/* harmony import */ var cytoscape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cytoscape */ \"./node_modules/cytoscape/dist/cytoscape.cjs.js\");\n/* harmony import */ var cytoscape__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(cytoscape__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var cytoscape_dagre__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cytoscape-dagre */ \"./node_modules/cytoscape-dagre/cytoscape-dagre.js\");\n/* harmony import */ var cytoscape_dagre__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(cytoscape_dagre__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\n\ncytoscape__WEBPACK_IMPORTED_MODULE_3___default.a.use(cytoscape_dagre__WEBPACK_IMPORTED_MODULE_4___default.a);\n\n/**\n * For now, creates if not found\n * @param {*} cy \n * @param {*} id \n * @param {*} meta \n */\nfunction processEleMeta(cy, id, meta, isNode = true, options = {}) {\n  console.log(`Processing ${id} with ${JSON.stringify(options)} for ${meta}`);\n  var ele = cy.elements().getElementById(id)[0];\n  if (!ele) {\n    console.log(\"ADDING\")\n    ele = cy.add({\n      group: isNode ? \"nodes\" : \"edges\",\n      data: { id, ...options }\n    })\n  }\n  // check if addClass is idempotent\n  if (meta & 1 << _constants__WEBPACK_IMPORTED_MODULE_2__[\"META_FLAG_IDX\"].PRESENT) {\n    ele.removeClass('hidden')\n  } else {\n    ele.addClass('hidden')\n  }\n\n  if (meta & 1 << _constants__WEBPACK_IMPORTED_MODULE_2__[\"META_FLAG_IDX\"].HIGHLIGHTED) {\n    ele.addClass('highlighted');\n  } else {\n    ele.removeClass('highlighted');\n  }\n}\n\nfunction wasmNodeIDtoCyto(id) {\n  return _constants__WEBPACK_IMPORTED_MODULE_2__[\"NODE_ID_PREFIX\"] + id;\n}\n\nfunction wasmEdgeIDtoCyto(id) {\n  return _constants__WEBPACK_IMPORTED_MODULE_2__[\"EDGE_ID_PREFIX\"] + id;\n}\n\nfunction operateOnNodeMeta(cy, cytograph) {\n  const nodeIdsPtr = cytograph.get_node_ids();\n  const nodeIdsCount = cytograph.node_ids_count();\n  const nodeIds = new Uint32Array(\n    wasm_cytoscape_wasm_cytoscape_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer,\n    nodeIdsPtr,\n    nodeIdsCount\n  );\n  for (var i = 0; i < nodeIdsCount; i++) {\n    let id = wasmNodeIDtoCyto(nodeIds[i]);\n    let meta = cytograph.get_node_meta(nodeIds[i]);\n    processEleMeta(cy, id, meta, true);\n  }\n}\n\nfunction operateOnEdgeMeta(cy, cytograph) {\n  const edgeIdsPtr = cytograph.get_edge_ids();\n  const edgeIdsCount = cytograph.edge_ids_count();\n  const edgeIds = new Uint32Array(\n    wasm_cytoscape_wasm_cytoscape_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer,\n    edgeIdsPtr,\n    edgeIdsCount\n  );\n  for (var i = 0; i < edgeIdsCount; i++) {\n    let wasmEdgeID = edgeIds[i];\n    let ends = new Uint32Array(wasm_cytoscape_wasm_cytoscape_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer, cytograph.get_edge_ends(wasmEdgeID), 2);\n    let source = wasmNodeIDtoCyto(ends[0]);\n    let target = wasmNodeIDtoCyto(ends[1]);\n    let id = wasmEdgeIDtoCyto(wasmEdgeID);\n    let meta = cytograph.get_edge_meta(wasmEdgeID);\n    processEleMeta(cy, id, meta, false, {source, target});\n  }\n}\n\nfunction operateOnMeta(cy, cytograph) {\n  operateOnNodeMeta(cy, cytograph);\n  operateOnEdgeMeta(cy, cytograph);\n}\n\n\nfunction removeElements(cy, cytograph) {\n  const removedNodesPtr = cytograph.get_removed_nodes();\n  const removedNodesCount = cytograph.removed_nodes_count();\n  const removedNodes = new Uint32Array(\n    wasm_cytoscape_wasm_cytoscape_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer,\n    removedNodesPtr,\n    removedNodesCount\n  );\n  for (var i = 0; i < removedNodes.length; i++) {\n    var el = cy.nodes(`node[id = \"${removedNodes[i]}\"]`);\n    cy.remove(el);\n  }\n\n  const removedEdgesPtr = cytograph.get_removed_edges();\n  const removedEdgesCount = cytograph.removed_edges_count();\n  const removedEdgesRaw = new Uint32Array(\n    wasm_cytoscape_wasm_cytoscape_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer,\n    removedEdgesPtr,\n    removedEdgesCount\n  );\n  for (var i = 0; i < removedEdgesRaw.length; i += 2) {\n    var el = cy.edges(\n      `edge[source = \"${removedEdgesRaw[i]}][target = \"${\n        removedEdgesRaw[i + 1]\n      }\"]`\n    );\n    cy.remove(el);\n  }\n}\n\nfunction regroupCy(cy) {\n  var layout = cy.layout({\n    name: \"circle\",\n    animationDuration: 300,\n  });\n  layout.run();\n}\n\n/**\n * When the client ticks, do all the buffered changes (e.g. additions and removals)\n * and then finally tick the underlying cytograph in wasm\n * @param {*} cy\n * @param {*} cytograph\n */\nfunction onTick(cy, cytograph) {\n  console.log(`--------------- TICK ---------------`);\n  // populateAdditions(cy, cytograph);\n  cytograph.tick(); // do it\n  console.log(`--------------- END SIMULATION ---------------`);\n  operateOnMeta(cy, cytograph); // display\n  console.log(`--------------- END VISUALIZATION ---------------`);\n  // removeElements(cy, cytograph);\n  regroupCy(cy);\n}\n\n/**\n * Initialize the backing wasm graph\n * @param {*} cy\n */\nfunction initGraph(cy) {\n  const cytograph = wasm_cytoscape__WEBPACK_IMPORTED_MODULE_1__[\"CytoGraph\"].new_full(5);\n  operateOnMeta(cy, cytograph);\n  regroupCy(cy);\n\n  document.getElementById(\"tickTimeButton\").onclick = () => onTick(cy, cytograph);\n  document.getElementById(\"regroupButton\").onclick = () => regroupCy(cy);\n}\n\n/**\n *  Initialize Cytoscape graphics\n */\nfunction initCy() {\n  var cy = (window.cy = cytoscape__WEBPACK_IMPORTED_MODULE_3___default()({\n    container: document.getElementById(\"cy\"),\n\n    boxSelectionEnabled: false,\n    autounselectify: true,\n\n    layout: {\n      name: \"circle\",\n    },\n\n    style: [\n      {\n        selector: \"node\",\n        style: {\n          \"background-color\": \"#11479e\",\n        },\n      },\n      {\n        selector: \"edge\",\n        style: {\n          width: 4,\n          \"target-arrow-shape\": \"triangle\",\n          \"line-color\": \"#9dbaea\",\n          \"target-arrow-color\": \"#9dbaea\",\n          \"curve-style\": \"bezier\",\n        },\n      },\n      {\n        selector: \"node[id]\",\n        style: {\n          label: \"data(id)\",\n        },\n      },\n      {\n        selector: '.highlighted',\n        style: {\n          'background-color': '#75b5aa',\n          'line-color': '#75b5aa',\n          'target-arrow-color': '#75b5aa',\n          'transition-property': 'background-color, line-color, target-arrow-color',\n        },\n      },\n      {\n        selector: '.hidden',\n        style: {\n          'visibility': 'hidden'\n        },\n      },\n    ],\n  }));\n\n  // init everything else\n  initGraph(cy);\n}\n\nif (document.readyState !== \"loading\") {\n  initCy();\n} else {\n  window.addEventListener(\"DOMContentLoaded\", initCy);\n}\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);