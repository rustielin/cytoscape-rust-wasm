(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "../pkg/wasm_cytoscape.js":
/*!********************************!*\
  !*** ../pkg/wasm_cytoscape.js ***!
  \********************************/
/*! exports provided: CytoGraph, __wbindgen_throw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wasm_cytoscape_bg.wasm */ \"../pkg/wasm_cytoscape_bg.wasm\");\n/* harmony import */ var _wasm_cytoscape_bg_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./wasm_cytoscape_bg.js */ \"../pkg/wasm_cytoscape_bg.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CytoGraph\", function() { return _wasm_cytoscape_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"CytoGraph\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return _wasm_cytoscape_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbindgen_throw\"]; });\n\n\n\n\n//# sourceURL=webpack:///../pkg/wasm_cytoscape.js?");

/***/ }),

/***/ "../pkg/wasm_cytoscape_bg.js":
/*!***********************************!*\
  !*** ../pkg/wasm_cytoscape_bg.js ***!
  \***********************************/
/*! exports provided: CytoGraph, __wbindgen_throw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CytoGraph\", function() { return CytoGraph; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony import */ var _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wasm_cytoscape_bg.wasm */ \"../pkg/wasm_cytoscape_bg.wasm\");\n\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory0 = new Uint8Array(_wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n/**\n* The main data structure for representing a cytoscape graph.\n* CytoGraph uses an internal graph structure `graph` as well as graph element\n* deltas such as `added_nodes` and `removed_nodes` to buffer changes to UI.\n*\n* Graph metadata is stored in the internal graph itself. Under the hood, elements should\n* not be removed directly from the graph, but rather flagged as removed with metadata.\n*/\nclass CytoGraph {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CytoGraph.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_cytograph_free\"](ptr);\n    }\n    /**\n    * @returns {CytoGraph}\n    */\n    static new() {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_new\"]();\n        return CytoGraph.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    add_node() {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_add_node\"](this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} idx\n    * @returns {number}\n    */\n    get_node_meta(idx) {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_get_node_meta\"](this.ptr, idx);\n        return ret;\n    }\n    /**\n    * @param {number} idx\n    * @param {number} meta\n    */\n    set_node_meta(idx, meta) {\n        _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_set_node_meta\"](this.ptr, idx, meta);\n    }\n    /**\n    * @returns {number}\n    */\n    get_added_nodes() {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_get_added_nodes\"](this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    added_nodes_count() {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_added_nodes_count\"](this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Number of members in each added node. This is used by Javascript to index\n    * directly into wasm linear memory\n    * @returns {number}\n    */\n    added_nodes_size() {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_added_nodes_size\"](this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} src\n    * @param {number} dst\n    * @returns {number}\n    */\n    add_edge(src, dst) {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_add_edge\"](this.ptr, src, dst);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_added_edges() {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_get_added_edges\"](this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    added_edges_count() {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_added_edges_count\"](this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Number of members in each added edge. This is used by Javascript to index\n    * directly into wasm linear memory\n    * @returns {number}\n    */\n    added_edges_size() {\n        var ret = _wasm_cytoscape_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"cytograph_added_edges_size\"](this.ptr);\n        return ret >>> 0;\n    }\n}\n\nconst __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../www/node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))\n\n//# sourceURL=webpack:///../pkg/wasm_cytoscape_bg.js?");

/***/ }),

/***/ "../pkg/wasm_cytoscape_bg.wasm":
/*!*************************************!*\
  !*** ../pkg/wasm_cytoscape_bg.wasm ***!
  \*************************************/
/*! exports provided: memory, __wbg_cytograph_free, cytograph_new, cytograph_add_node, cytograph_get_node_meta, cytograph_set_node_meta, cytograph_get_added_nodes, cytograph_added_nodes_count, cytograph_added_nodes_size, cytograph_add_edge, cytograph_get_added_edges, cytograph_added_edges_count, cytograph_added_edges_size */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./wasm_cytoscape_bg.js */ \"../pkg/wasm_cytoscape_bg.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///../pkg/wasm_cytoscape_bg.wasm?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var wasm_cytoscape_wasm_cytoscape_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! wasm-cytoscape/wasm_cytoscape_bg */ \"../pkg/wasm_cytoscape_bg.wasm\");\n/* harmony import */ var wasm_cytoscape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! wasm-cytoscape */ \"../pkg/wasm_cytoscape.js\");\n/* harmony import */ var cytoscape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cytoscape */ \"./node_modules/cytoscape/dist/cytoscape.cjs.js\");\n/* harmony import */ var cytoscape__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(cytoscape__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var cytoscape_dagre__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cytoscape-dagre */ \"./node_modules/cytoscape-dagre/cytoscape-dagre.js\");\n/* harmony import */ var cytoscape_dagre__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(cytoscape_dagre__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\n\ncytoscape__WEBPACK_IMPORTED_MODULE_2___default.a.use(cytoscape_dagre__WEBPACK_IMPORTED_MODULE_3___default.a);\n\n/**\n *  Get the newly added elements in the backing wasm graph and populate them into cytoscape\n */\nfunction populateAdditions(cy, cytograph) {\n  const addedNodesPtr = cytograph.get_added_nodes();\n  const addedNodesCount = cytograph.added_nodes_count();\n  const addedNodes = new Uint32Array(\n    wasm_cytoscape_wasm_cytoscape_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer,\n    addedNodesPtr,\n    addedNodesCount\n  );\n  for (var i = 0; i < addedNodes.length; i++) {\n    cy.add({\n      group: \"nodes\",\n      data: { id: addedNodes[i] },\n    });\n  }\n\n  const addedEdgesPtr = cytograph.get_added_edges();\n  const addedEdgesCount = cytograph.added_edges_count();\n  const addedEdgesRaw = new Uint32Array(\n    wasm_cytoscape_wasm_cytoscape_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer,\n    addedEdgesPtr,\n    addedEdgesCount\n  );\n  for (var i = 0; i < addedEdgesRaw.length; i += 2) {\n    cy.add({\n      group: \"edges\",\n      data: { source: addedEdgesRaw[i], target: addedEdgesRaw[i + 1] },\n    });\n  }\n}\n\nfunction removeElements(cy, cytograph) {\n  const removedNodesPtr = cytograph.get_removed_nodes();\n  const removedNodesCount = cytograph.removed_nodes_count();\n  const removedNodes = new Uint32Array(\n    wasm_cytoscape_wasm_cytoscape_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer,\n    removedNodesPtr,\n    removedNodesCount\n  );\n  for (var i = 0; i < removedNodes.length; i++) {\n    var el = cy.nodes(`node[id = \"${removedNodes[i]}\"]`);\n    cy.remove(el);\n  }\n\n  const removedEdgesPtr = cytograph.get_removed_edges();\n  const removedEdgesCount = cytograph.removed_edges_count();\n  const removedEdgesRaw = new Uint32Array(\n    wasm_cytoscape_wasm_cytoscape_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer,\n    removedEdgesPtr,\n    removedEdgesCount\n  );\n  for (var i = 0; i < removedEdgesRaw.length; i += 2) {\n    var el = cy.edges(\n      `edge[source = \"${removedEdgesRaw[i]}][target = \"${\n        removedEdgesRaw[i + 1]\n      }\"]`\n    );\n    cy.remove(el);\n  }\n}\n\nfunction regroupCy(cy) {\n  var layout = cy.layout({\n    name: \"dagre\",\n    animationDuration: 300,\n  });\n  layout.run();\n}\n\n/**\n * When the client ticks, do all the buffered changes (e.g. additions and removals)\n * and then finally tick the underlying cytograph in wasm\n * @param {*} cy\n * @param {*} cytograph\n */\nfunction onTick(cy, cytograph) {\n  populateAdditions(cy, cytograph);\n  removeElements(cy, cytograph);\n  cytograph.tick();\n}\n\n/**\n * Initialize the backing wasm graph\n * @param {*} cy\n */\nfunction initGraph(cy) {\n  const cytograph = wasm_cytoscape__WEBPACK_IMPORTED_MODULE_1__[\"CytoGraph\"].new();\n  var src = cytograph.add_node();\n  var dst = cytograph.add_node();\n\n  var ptr = cytograph.get_added_nodes();\n  const nodes = new Uint32Array(\n    wasm_cytoscape_wasm_cytoscape_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer,\n    ptr,\n    cytograph.added_nodes_count() * cytograph.added_nodes_size()\n  );\n  for (var i = 0; i < nodes.length; i += cytograph.added_nodes_size()) {\n    console.log(`Node ID ${nodes[i]}`);\n  }\n\n  console.log(`Meta ${cytograph.get_node_meta(src)}`);\n  cytograph.set_node_meta(src, 69);\n  console.log(`Meta ${cytograph.get_node_meta(src)}`);\n\n  var edge = cytograph.add_edge(src, dst);\n  var edge = cytograph.add_edge(dst, src);\n  var edge = cytograph.add_edge(src, dst);\n  var edge = cytograph.add_edge(src, dst);\n  var edge = cytograph.add_edge(src, dst);\n\n  const edges = new Uint32Array(\n    wasm_cytoscape_wasm_cytoscape_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer,\n    cytograph.get_added_edges(),\n    cytograph.added_edges_count() * cytograph.added_edges_size()\n  );\n  for (var i = 0; i < edges.length; i += cytograph.added_edges_size()) {\n    console.log(`Edge ID ${edges[i]} from ${edges[i + 1]} => ${edges[i + 2]}`);\n  }\n  // document.getElementById(\"addNodeButton\").onclick = () => cytograph.add_node();\n  // document.getElementById(\"tickTimeButton\").onclick = () =>\n  //   onTick(cy, cytograph);\n  // document.getElementById(\"regroupButton\").onclick = () => regroupCy(cy);\n}\n\n/**\n *  Initialize Cytoscape graphics\n */\nfunction initCy() {\n  var cy = (window.cy = cytoscape__WEBPACK_IMPORTED_MODULE_2___default()({\n    container: document.getElementById(\"cy\"),\n\n    boxSelectionEnabled: false,\n    autounselectify: true,\n\n    layout: {\n      name: \"dagre\",\n    },\n\n    style: [\n      {\n        selector: \"node\",\n        style: {\n          \"background-color\": \"#11479e\",\n        },\n      },\n      {\n        selector: \"edge\",\n        style: {\n          width: 4,\n          \"target-arrow-shape\": \"triangle\",\n          \"line-color\": \"#9dbaea\",\n          \"target-arrow-color\": \"#9dbaea\",\n          \"curve-style\": \"bezier\",\n        },\n      },\n      {\n        selector: \"node[id]\",\n        style: {\n          label: \"data(id)\",\n        },\n      },\n    ],\n  }));\n\n  // init everything else\n  initGraph(cy);\n}\n\nif (document.readyState !== \"loading\") {\n  initCy();\n} else {\n  window.addEventListener(\"DOMContentLoaded\", initCy);\n}\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);